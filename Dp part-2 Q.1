https://leetcode.com/problems/minimum-path-sum/description/

Solution : 1

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,0));
        
        for(int i= m-1;i>=0;i--){
            for(int j=n-1;j>=0;j--){
                if(i == m-1 && j == n-1){
                        dp[m-1][n-1] = grid[m-1][n-1];
                }
                else if(i == m-1){
                    dp[i][j] = grid[i][j] + dp[i][j+1];
                }
                else if( j == n-1){
                    dp[i][j] = grid[i][j] + dp[i+1][j];
                }
                else{
                    dp[i][j] = min(dp[i+1][j] , dp[i][j+1]) + grid[i][j];
                }
            }
        }
        return dp[0][0];


    }
};


Solution :2 Space Optimised solution 

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        // vector<vector<int>> dp(m,vector<int>(n,0));
        // space optimised 
        vector<int> dp(n);
        dp[n-1] = grid[m-1][n-1];
        for(int i=n-2;i>=0;i--){
            dp[i] = grid[m-1][i] + dp[i+1];
        }
        for(int i=m-2;i>=0;i--){
            dp[n-1] += grid[i][n-1];
            for(int j=n-2;j>=0;j--){
                dp[j] = min(dp[j+1], dp[j]) + grid[i][j];
            }
        }
        return dp[0];

       


    }
};
